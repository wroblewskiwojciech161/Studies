Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUALS

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> expression MINUS expression
Rule 4     expression -> expression TIMES expression
Rule 5     expression -> expression POWER wyk
Rule 6     expression -> expression DIVIDE expression
Rule 7     expression -> MINUS NUMBER
Rule 8     expression -> LPAREN expression RPAREN
Rule 9     expression -> MINUS LPAREN expression RPAREN
Rule 10    expression -> LPAREN NUMBER RPAREN
Rule 11    expression -> NUMBER
Rule 12    wyk -> wyk PLUS wyk
Rule 13    wyk -> wyk MINUS wyk
Rule 14    wyk -> wyk TIMES wyk
Rule 15    wyk -> wyk DIVIDE wyk
Rule 16    wyk -> MINUS NUMBER
Rule 17    wyk -> MINUS wyk
Rule 18    wyk -> LPAREN wyk RPAREN
Rule 19    wyk -> NUMBER

Terminals, with rules where they appear

DIVIDE               : 6 15
EQUALS               : 
LPAREN               : 8 9 10 18
MINUS                : 3 7 9 13 16 17
NUMBER               : 7 10 11 16 19
PLUS                 : 2 12
POWER                : 5
RPAREN               : 8 9 10 18
TIMES                : 4 14
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3 4 4 5 6 6 8 9
statement            : 0
wyk                  : 5 12 12 13 13 14 14 15 15 17 18

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression POWER wyk
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS NUMBER
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . MINUS LPAREN expression RPAREN
    (10) expression -> . LPAREN NUMBER RPAREN
    (11) expression -> . NUMBER

    MINUS           shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 4

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . POWER wyk
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    TIMES           shift and go to state 8
    POWER           shift and go to state 9
    DIVIDE          shift and go to state 10


state 3

    (7) expression -> MINUS . NUMBER
    (9) expression -> MINUS . LPAREN expression RPAREN

    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 12


state 4

    (11) expression -> NUMBER .

    PLUS            reduce using rule 11 (expression -> NUMBER .)
    MINUS           reduce using rule 11 (expression -> NUMBER .)
    TIMES           reduce using rule 11 (expression -> NUMBER .)
    POWER           reduce using rule 11 (expression -> NUMBER .)
    DIVIDE          reduce using rule 11 (expression -> NUMBER .)
    $end            reduce using rule 11 (expression -> NUMBER .)
    RPAREN          reduce using rule 11 (expression -> NUMBER .)


state 5

    (8) expression -> LPAREN . expression RPAREN
    (10) expression -> LPAREN . NUMBER RPAREN
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression POWER wyk
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS NUMBER
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . MINUS LPAREN expression RPAREN
    (10) expression -> . LPAREN NUMBER RPAREN
    (11) expression -> . NUMBER

    NUMBER          shift and go to state 14
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 5

    expression                     shift and go to state 13

state 6

    (2) expression -> expression PLUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression POWER wyk
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS NUMBER
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . MINUS LPAREN expression RPAREN
    (10) expression -> . LPAREN NUMBER RPAREN
    (11) expression -> . NUMBER

    MINUS           shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 4

    expression                     shift and go to state 15

state 7

    (3) expression -> expression MINUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression POWER wyk
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS NUMBER
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . MINUS LPAREN expression RPAREN
    (10) expression -> . LPAREN NUMBER RPAREN
    (11) expression -> . NUMBER

    MINUS           shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 4

    expression                     shift and go to state 16

state 8

    (4) expression -> expression TIMES . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression POWER wyk
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS NUMBER
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . MINUS LPAREN expression RPAREN
    (10) expression -> . LPAREN NUMBER RPAREN
    (11) expression -> . NUMBER

    MINUS           shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 4

    expression                     shift and go to state 17

state 9

    (5) expression -> expression POWER . wyk
    (12) wyk -> . wyk PLUS wyk
    (13) wyk -> . wyk MINUS wyk
    (14) wyk -> . wyk TIMES wyk
    (15) wyk -> . wyk DIVIDE wyk
    (16) wyk -> . MINUS NUMBER
    (17) wyk -> . MINUS wyk
    (18) wyk -> . LPAREN wyk RPAREN
    (19) wyk -> . NUMBER

    MINUS           shift and go to state 19
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 20

    wyk                            shift and go to state 18

state 10

    (6) expression -> expression DIVIDE . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression POWER wyk
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS NUMBER
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . MINUS LPAREN expression RPAREN
    (10) expression -> . LPAREN NUMBER RPAREN
    (11) expression -> . NUMBER

    MINUS           shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 4

    expression                     shift and go to state 22

state 11

    (7) expression -> MINUS NUMBER .

    PLUS            reduce using rule 7 (expression -> MINUS NUMBER .)
    MINUS           reduce using rule 7 (expression -> MINUS NUMBER .)
    TIMES           reduce using rule 7 (expression -> MINUS NUMBER .)
    POWER           reduce using rule 7 (expression -> MINUS NUMBER .)
    DIVIDE          reduce using rule 7 (expression -> MINUS NUMBER .)
    $end            reduce using rule 7 (expression -> MINUS NUMBER .)
    RPAREN          reduce using rule 7 (expression -> MINUS NUMBER .)


state 12

    (9) expression -> MINUS LPAREN . expression RPAREN
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression POWER wyk
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS NUMBER
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . MINUS LPAREN expression RPAREN
    (10) expression -> . LPAREN NUMBER RPAREN
    (11) expression -> . NUMBER

    MINUS           shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 4

    expression                     shift and go to state 23

state 13

    (8) expression -> LPAREN expression . RPAREN
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . POWER wyk
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 24
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    TIMES           shift and go to state 8
    POWER           shift and go to state 9
    DIVIDE          shift and go to state 10


state 14

    (10) expression -> LPAREN NUMBER . RPAREN
    (11) expression -> NUMBER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 25
    PLUS            reduce using rule 11 (expression -> NUMBER .)
    MINUS           reduce using rule 11 (expression -> NUMBER .)
    TIMES           reduce using rule 11 (expression -> NUMBER .)
    POWER           reduce using rule 11 (expression -> NUMBER .)
    DIVIDE          reduce using rule 11 (expression -> NUMBER .)

  ! RPAREN          [ reduce using rule 11 (expression -> NUMBER .) ]


state 15

    (2) expression -> expression PLUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . POWER wyk
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 2 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 2 (expression -> expression PLUS expression .)
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 8
    POWER           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! TIMES           [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]


state 16

    (3) expression -> expression MINUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . POWER wyk
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 3 (expression -> expression MINUS expression .)
    $end            reduce using rule 3 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 8
    POWER           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! TIMES           [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]


state 17

    (4) expression -> expression TIMES expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . POWER wyk
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 4 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 4 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 4 (expression -> expression TIMES expression .)
    $end            reduce using rule 4 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 4 (expression -> expression TIMES expression .)
    POWER           shift and go to state 9

  ! POWER           [ reduce using rule 4 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]
  ! TIMES           [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 10 ]


state 18

    (5) expression -> expression POWER wyk .
    (12) wyk -> wyk . PLUS wyk
    (13) wyk -> wyk . MINUS wyk
    (14) wyk -> wyk . TIMES wyk
    (15) wyk -> wyk . DIVIDE wyk

    PLUS            reduce using rule 5 (expression -> expression POWER wyk .)
    MINUS           reduce using rule 5 (expression -> expression POWER wyk .)
    TIMES           reduce using rule 5 (expression -> expression POWER wyk .)
    POWER           reduce using rule 5 (expression -> expression POWER wyk .)
    DIVIDE          reduce using rule 5 (expression -> expression POWER wyk .)
    $end            reduce using rule 5 (expression -> expression POWER wyk .)
    RPAREN          reduce using rule 5 (expression -> expression POWER wyk .)

  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! TIMES           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 19

    (16) wyk -> MINUS . NUMBER
    (17) wyk -> MINUS . wyk
    (12) wyk -> . wyk PLUS wyk
    (13) wyk -> . wyk MINUS wyk
    (14) wyk -> . wyk TIMES wyk
    (15) wyk -> . wyk DIVIDE wyk
    (16) wyk -> . MINUS NUMBER
    (17) wyk -> . MINUS wyk
    (18) wyk -> . LPAREN wyk RPAREN
    (19) wyk -> . NUMBER

    NUMBER          shift and go to state 30
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 21

    wyk                            shift and go to state 31

state 20

    (19) wyk -> NUMBER .

    PLUS            reduce using rule 19 (wyk -> NUMBER .)
    MINUS           reduce using rule 19 (wyk -> NUMBER .)
    TIMES           reduce using rule 19 (wyk -> NUMBER .)
    DIVIDE          reduce using rule 19 (wyk -> NUMBER .)
    POWER           reduce using rule 19 (wyk -> NUMBER .)
    $end            reduce using rule 19 (wyk -> NUMBER .)
    RPAREN          reduce using rule 19 (wyk -> NUMBER .)


state 21

    (18) wyk -> LPAREN . wyk RPAREN
    (12) wyk -> . wyk PLUS wyk
    (13) wyk -> . wyk MINUS wyk
    (14) wyk -> . wyk TIMES wyk
    (15) wyk -> . wyk DIVIDE wyk
    (16) wyk -> . MINUS NUMBER
    (17) wyk -> . MINUS wyk
    (18) wyk -> . LPAREN wyk RPAREN
    (19) wyk -> . NUMBER

    MINUS           shift and go to state 19
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 20

    wyk                            shift and go to state 32

state 22

    (6) expression -> expression DIVIDE expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . POWER wyk
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 6 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 6 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 6 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 6 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 9

  ! POWER           [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]
  ! TIMES           [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 10 ]


state 23

    (9) expression -> MINUS LPAREN expression . RPAREN
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . POWER wyk
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 33
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    TIMES           shift and go to state 8
    POWER           shift and go to state 9
    DIVIDE          shift and go to state 10


state 24

    (8) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 8 (expression -> LPAREN expression RPAREN .)


state 25

    (10) expression -> LPAREN NUMBER RPAREN .

    PLUS            reduce using rule 10 (expression -> LPAREN NUMBER RPAREN .)
    MINUS           reduce using rule 10 (expression -> LPAREN NUMBER RPAREN .)
    TIMES           reduce using rule 10 (expression -> LPAREN NUMBER RPAREN .)
    POWER           reduce using rule 10 (expression -> LPAREN NUMBER RPAREN .)
    DIVIDE          reduce using rule 10 (expression -> LPAREN NUMBER RPAREN .)
    $end            reduce using rule 10 (expression -> LPAREN NUMBER RPAREN .)
    RPAREN          reduce using rule 10 (expression -> LPAREN NUMBER RPAREN .)


state 26

    (12) wyk -> wyk PLUS . wyk
    (12) wyk -> . wyk PLUS wyk
    (13) wyk -> . wyk MINUS wyk
    (14) wyk -> . wyk TIMES wyk
    (15) wyk -> . wyk DIVIDE wyk
    (16) wyk -> . MINUS NUMBER
    (17) wyk -> . MINUS wyk
    (18) wyk -> . LPAREN wyk RPAREN
    (19) wyk -> . NUMBER

    MINUS           shift and go to state 19
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 20

    wyk                            shift and go to state 34

state 27

    (13) wyk -> wyk MINUS . wyk
    (12) wyk -> . wyk PLUS wyk
    (13) wyk -> . wyk MINUS wyk
    (14) wyk -> . wyk TIMES wyk
    (15) wyk -> . wyk DIVIDE wyk
    (16) wyk -> . MINUS NUMBER
    (17) wyk -> . MINUS wyk
    (18) wyk -> . LPAREN wyk RPAREN
    (19) wyk -> . NUMBER

    MINUS           shift and go to state 19
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 20

    wyk                            shift and go to state 35

state 28

    (14) wyk -> wyk TIMES . wyk
    (12) wyk -> . wyk PLUS wyk
    (13) wyk -> . wyk MINUS wyk
    (14) wyk -> . wyk TIMES wyk
    (15) wyk -> . wyk DIVIDE wyk
    (16) wyk -> . MINUS NUMBER
    (17) wyk -> . MINUS wyk
    (18) wyk -> . LPAREN wyk RPAREN
    (19) wyk -> . NUMBER

    MINUS           shift and go to state 19
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 20

    wyk                            shift and go to state 36

state 29

    (15) wyk -> wyk DIVIDE . wyk
    (12) wyk -> . wyk PLUS wyk
    (13) wyk -> . wyk MINUS wyk
    (14) wyk -> . wyk TIMES wyk
    (15) wyk -> . wyk DIVIDE wyk
    (16) wyk -> . MINUS NUMBER
    (17) wyk -> . MINUS wyk
    (18) wyk -> . LPAREN wyk RPAREN
    (19) wyk -> . NUMBER

    MINUS           shift and go to state 19
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 20

    wyk                            shift and go to state 37

state 30

    (16) wyk -> MINUS NUMBER .
    (19) wyk -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 16 (wyk -> MINUS NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 16 (wyk -> MINUS NUMBER .)
  ! reduce/reduce conflict for TIMES resolved using rule 16 (wyk -> MINUS NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 16 (wyk -> MINUS NUMBER .)
  ! reduce/reduce conflict for POWER resolved using rule 16 (wyk -> MINUS NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 16 (wyk -> MINUS NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 16 (wyk -> MINUS NUMBER .)
    PLUS            reduce using rule 16 (wyk -> MINUS NUMBER .)
    MINUS           reduce using rule 16 (wyk -> MINUS NUMBER .)
    TIMES           reduce using rule 16 (wyk -> MINUS NUMBER .)
    DIVIDE          reduce using rule 16 (wyk -> MINUS NUMBER .)
    POWER           reduce using rule 16 (wyk -> MINUS NUMBER .)
    $end            reduce using rule 16 (wyk -> MINUS NUMBER .)
    RPAREN          reduce using rule 16 (wyk -> MINUS NUMBER .)

  ! PLUS            [ reduce using rule 19 (wyk -> NUMBER .) ]
  ! MINUS           [ reduce using rule 19 (wyk -> NUMBER .) ]
  ! TIMES           [ reduce using rule 19 (wyk -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 19 (wyk -> NUMBER .) ]
  ! POWER           [ reduce using rule 19 (wyk -> NUMBER .) ]
  ! $end            [ reduce using rule 19 (wyk -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 19 (wyk -> NUMBER .) ]


state 31

    (17) wyk -> MINUS wyk .
    (12) wyk -> wyk . PLUS wyk
    (13) wyk -> wyk . MINUS wyk
    (14) wyk -> wyk . TIMES wyk
    (15) wyk -> wyk . DIVIDE wyk

    PLUS            reduce using rule 17 (wyk -> MINUS wyk .)
    MINUS           reduce using rule 17 (wyk -> MINUS wyk .)
    TIMES           reduce using rule 17 (wyk -> MINUS wyk .)
    DIVIDE          reduce using rule 17 (wyk -> MINUS wyk .)
    POWER           reduce using rule 17 (wyk -> MINUS wyk .)
    $end            reduce using rule 17 (wyk -> MINUS wyk .)
    RPAREN          reduce using rule 17 (wyk -> MINUS wyk .)

  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! TIMES           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 32

    (18) wyk -> LPAREN wyk . RPAREN
    (12) wyk -> wyk . PLUS wyk
    (13) wyk -> wyk . MINUS wyk
    (14) wyk -> wyk . TIMES wyk
    (15) wyk -> wyk . DIVIDE wyk

    RPAREN          shift and go to state 38
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    TIMES           shift and go to state 28
    DIVIDE          shift and go to state 29


state 33

    (9) expression -> MINUS LPAREN expression RPAREN .

    PLUS            reduce using rule 9 (expression -> MINUS LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (expression -> MINUS LPAREN expression RPAREN .)
    TIMES           reduce using rule 9 (expression -> MINUS LPAREN expression RPAREN .)
    POWER           reduce using rule 9 (expression -> MINUS LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (expression -> MINUS LPAREN expression RPAREN .)
    $end            reduce using rule 9 (expression -> MINUS LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> MINUS LPAREN expression RPAREN .)


state 34

    (12) wyk -> wyk PLUS wyk .
    (12) wyk -> wyk . PLUS wyk
    (13) wyk -> wyk . MINUS wyk
    (14) wyk -> wyk . TIMES wyk
    (15) wyk -> wyk . DIVIDE wyk

    PLUS            reduce using rule 12 (wyk -> wyk PLUS wyk .)
    MINUS           reduce using rule 12 (wyk -> wyk PLUS wyk .)
    POWER           reduce using rule 12 (wyk -> wyk PLUS wyk .)
    $end            reduce using rule 12 (wyk -> wyk PLUS wyk .)
    RPAREN          reduce using rule 12 (wyk -> wyk PLUS wyk .)
    TIMES           shift and go to state 28
    DIVIDE          shift and go to state 29

  ! TIMES           [ reduce using rule 12 (wyk -> wyk PLUS wyk .) ]
  ! DIVIDE          [ reduce using rule 12 (wyk -> wyk PLUS wyk .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]


state 35

    (13) wyk -> wyk MINUS wyk .
    (12) wyk -> wyk . PLUS wyk
    (13) wyk -> wyk . MINUS wyk
    (14) wyk -> wyk . TIMES wyk
    (15) wyk -> wyk . DIVIDE wyk

    PLUS            reduce using rule 13 (wyk -> wyk MINUS wyk .)
    MINUS           reduce using rule 13 (wyk -> wyk MINUS wyk .)
    POWER           reduce using rule 13 (wyk -> wyk MINUS wyk .)
    $end            reduce using rule 13 (wyk -> wyk MINUS wyk .)
    RPAREN          reduce using rule 13 (wyk -> wyk MINUS wyk .)
    TIMES           shift and go to state 28
    DIVIDE          shift and go to state 29

  ! TIMES           [ reduce using rule 13 (wyk -> wyk MINUS wyk .) ]
  ! DIVIDE          [ reduce using rule 13 (wyk -> wyk MINUS wyk .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]


state 36

    (14) wyk -> wyk TIMES wyk .
    (12) wyk -> wyk . PLUS wyk
    (13) wyk -> wyk . MINUS wyk
    (14) wyk -> wyk . TIMES wyk
    (15) wyk -> wyk . DIVIDE wyk

    PLUS            reduce using rule 14 (wyk -> wyk TIMES wyk .)
    MINUS           reduce using rule 14 (wyk -> wyk TIMES wyk .)
    TIMES           reduce using rule 14 (wyk -> wyk TIMES wyk .)
    DIVIDE          reduce using rule 14 (wyk -> wyk TIMES wyk .)
    POWER           reduce using rule 14 (wyk -> wyk TIMES wyk .)
    $end            reduce using rule 14 (wyk -> wyk TIMES wyk .)
    RPAREN          reduce using rule 14 (wyk -> wyk TIMES wyk .)

  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! TIMES           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 37

    (15) wyk -> wyk DIVIDE wyk .
    (12) wyk -> wyk . PLUS wyk
    (13) wyk -> wyk . MINUS wyk
    (14) wyk -> wyk . TIMES wyk
    (15) wyk -> wyk . DIVIDE wyk

    PLUS            reduce using rule 15 (wyk -> wyk DIVIDE wyk .)
    MINUS           reduce using rule 15 (wyk -> wyk DIVIDE wyk .)
    TIMES           reduce using rule 15 (wyk -> wyk DIVIDE wyk .)
    DIVIDE          reduce using rule 15 (wyk -> wyk DIVIDE wyk .)
    POWER           reduce using rule 15 (wyk -> wyk DIVIDE wyk .)
    $end            reduce using rule 15 (wyk -> wyk DIVIDE wyk .)
    RPAREN          reduce using rule 15 (wyk -> wyk DIVIDE wyk .)

  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! TIMES           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 38

    (18) wyk -> LPAREN wyk RPAREN .

    PLUS            reduce using rule 18 (wyk -> LPAREN wyk RPAREN .)
    MINUS           reduce using rule 18 (wyk -> LPAREN wyk RPAREN .)
    TIMES           reduce using rule 18 (wyk -> LPAREN wyk RPAREN .)
    DIVIDE          reduce using rule 18 (wyk -> LPAREN wyk RPAREN .)
    POWER           reduce using rule 18 (wyk -> LPAREN wyk RPAREN .)
    $end            reduce using rule 18 (wyk -> LPAREN wyk RPAREN .)
    RPAREN          reduce using rule 18 (wyk -> LPAREN wyk RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 14 resolved as shift
WARNING: reduce/reduce conflict in state 30 resolved using rule (wyk -> MINUS NUMBER)
WARNING: rejected rule (wyk -> NUMBER) in state 30
