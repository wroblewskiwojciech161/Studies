Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> END
Rule 2     expression -> ERR
Rule 3     expression -> expression END
Rule 4     expression -> expression ADD expression
Rule 5     expression -> expression SUB expression
Rule 6     expression -> expression MULT expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> expression MODULO expression
Rule 9     expression -> expression POWER exponent
Rule 10    exponent -> exponent ADD exponent
Rule 11    exponent -> exponent SUB exponent
Rule 12    exponent -> exponent MULT exponent
Rule 13    exponent -> exponent DIVIDE exponent
Rule 14    exponent -> exponent MODULO exponent
Rule 15    exponent -> exponent POWER exponent
Rule 16    expression -> SUB NUMBER
Rule 17    expression -> SUB expression
Rule 18    expression -> LBRACKET expression RBRACKET
Rule 19    expression -> NUMBER
Rule 20    exponent -> SUB NUMBER
Rule 21    exponent -> SUB exponent
Rule 22    exponent -> LBRACKET exponent RBRACKET
Rule 23    exponent -> NUMBER

Terminals, with rules where they appear

ADD                  : 4 10
DIVIDE               : 7 13
END                  : 1 3
ERR                  : 2
LBRACKET             : 18 22
MODULO               : 8 14
MULT                 : 6 12
NUMBER               : 16 19 20 23
POWER                : 9 15
RBRACKET             : 18 22
SUB                  : 5 11 16 17 20 21
error                : 

Nonterminals, with rules where they appear

exponent             : 9 10 10 11 11 12 12 13 13 14 14 15 15 21 22
expression           : 3 4 4 5 5 6 6 7 7 8 8 9 17 18 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . END
    (2) expression -> . ERR
    (3) expression -> . expression END
    (4) expression -> . expression ADD expression
    (5) expression -> . expression SUB expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULO expression
    (9) expression -> . expression POWER exponent
    (16) expression -> . SUB NUMBER
    (17) expression -> . SUB expression
    (18) expression -> . LBRACKET expression RBRACKET
    (19) expression -> . NUMBER

    END             shift and go to state 2
    ERR             shift and go to state 3
    SUB             shift and go to state 4
    LBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (3) expression -> expression . END
    (4) expression -> expression . ADD expression
    (5) expression -> expression . SUB expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULO expression
    (9) expression -> expression . POWER exponent

    END             shift and go to state 7
    ADD             shift and go to state 8
    SUB             shift and go to state 9
    MULT            shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULO          shift and go to state 12
    POWER           shift and go to state 13


state 2

    (1) expression -> END .

    END             reduce using rule 1 (expression -> END .)
    ADD             reduce using rule 1 (expression -> END .)
    SUB             reduce using rule 1 (expression -> END .)
    MULT            reduce using rule 1 (expression -> END .)
    DIVIDE          reduce using rule 1 (expression -> END .)
    MODULO          reduce using rule 1 (expression -> END .)
    POWER           reduce using rule 1 (expression -> END .)
    $end            reduce using rule 1 (expression -> END .)
    RBRACKET        reduce using rule 1 (expression -> END .)


state 3

    (2) expression -> ERR .

    END             reduce using rule 2 (expression -> ERR .)
    ADD             reduce using rule 2 (expression -> ERR .)
    SUB             reduce using rule 2 (expression -> ERR .)
    MULT            reduce using rule 2 (expression -> ERR .)
    DIVIDE          reduce using rule 2 (expression -> ERR .)
    MODULO          reduce using rule 2 (expression -> ERR .)
    POWER           reduce using rule 2 (expression -> ERR .)
    $end            reduce using rule 2 (expression -> ERR .)
    RBRACKET        reduce using rule 2 (expression -> ERR .)


state 4

    (16) expression -> SUB . NUMBER
    (17) expression -> SUB . expression
    (1) expression -> . END
    (2) expression -> . ERR
    (3) expression -> . expression END
    (4) expression -> . expression ADD expression
    (5) expression -> . expression SUB expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULO expression
    (9) expression -> . expression POWER exponent
    (16) expression -> . SUB NUMBER
    (17) expression -> . SUB expression
    (18) expression -> . LBRACKET expression RBRACKET
    (19) expression -> . NUMBER

    NUMBER          shift and go to state 14
    END             shift and go to state 2
    ERR             shift and go to state 3
    SUB             shift and go to state 4
    LBRACKET        shift and go to state 6

    expression                     shift and go to state 15

state 5

    (19) expression -> NUMBER .

    END             reduce using rule 19 (expression -> NUMBER .)
    ADD             reduce using rule 19 (expression -> NUMBER .)
    SUB             reduce using rule 19 (expression -> NUMBER .)
    MULT            reduce using rule 19 (expression -> NUMBER .)
    DIVIDE          reduce using rule 19 (expression -> NUMBER .)
    MODULO          reduce using rule 19 (expression -> NUMBER .)
    POWER           reduce using rule 19 (expression -> NUMBER .)
    $end            reduce using rule 19 (expression -> NUMBER .)
    RBRACKET        reduce using rule 19 (expression -> NUMBER .)


state 6

    (18) expression -> LBRACKET . expression RBRACKET
    (1) expression -> . END
    (2) expression -> . ERR
    (3) expression -> . expression END
    (4) expression -> . expression ADD expression
    (5) expression -> . expression SUB expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULO expression
    (9) expression -> . expression POWER exponent
    (16) expression -> . SUB NUMBER
    (17) expression -> . SUB expression
    (18) expression -> . LBRACKET expression RBRACKET
    (19) expression -> . NUMBER

    END             shift and go to state 2
    ERR             shift and go to state 3
    SUB             shift and go to state 4
    LBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5

    expression                     shift and go to state 16

state 7

    (3) expression -> expression END .

    END             reduce using rule 3 (expression -> expression END .)
    ADD             reduce using rule 3 (expression -> expression END .)
    SUB             reduce using rule 3 (expression -> expression END .)
    MULT            reduce using rule 3 (expression -> expression END .)
    DIVIDE          reduce using rule 3 (expression -> expression END .)
    MODULO          reduce using rule 3 (expression -> expression END .)
    POWER           reduce using rule 3 (expression -> expression END .)
    $end            reduce using rule 3 (expression -> expression END .)
    RBRACKET        reduce using rule 3 (expression -> expression END .)


state 8

    (4) expression -> expression ADD . expression
    (1) expression -> . END
    (2) expression -> . ERR
    (3) expression -> . expression END
    (4) expression -> . expression ADD expression
    (5) expression -> . expression SUB expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULO expression
    (9) expression -> . expression POWER exponent
    (16) expression -> . SUB NUMBER
    (17) expression -> . SUB expression
    (18) expression -> . LBRACKET expression RBRACKET
    (19) expression -> . NUMBER

    END             shift and go to state 2
    ERR             shift and go to state 3
    SUB             shift and go to state 4
    LBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5

    expression                     shift and go to state 17

state 9

    (5) expression -> expression SUB . expression
    (1) expression -> . END
    (2) expression -> . ERR
    (3) expression -> . expression END
    (4) expression -> . expression ADD expression
    (5) expression -> . expression SUB expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULO expression
    (9) expression -> . expression POWER exponent
    (16) expression -> . SUB NUMBER
    (17) expression -> . SUB expression
    (18) expression -> . LBRACKET expression RBRACKET
    (19) expression -> . NUMBER

    END             shift and go to state 2
    ERR             shift and go to state 3
    SUB             shift and go to state 4
    LBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5

    expression                     shift and go to state 18

state 10

    (6) expression -> expression MULT . expression
    (1) expression -> . END
    (2) expression -> . ERR
    (3) expression -> . expression END
    (4) expression -> . expression ADD expression
    (5) expression -> . expression SUB expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULO expression
    (9) expression -> . expression POWER exponent
    (16) expression -> . SUB NUMBER
    (17) expression -> . SUB expression
    (18) expression -> . LBRACKET expression RBRACKET
    (19) expression -> . NUMBER

    END             shift and go to state 2
    ERR             shift and go to state 3
    SUB             shift and go to state 4
    LBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5

    expression                     shift and go to state 19

state 11

    (7) expression -> expression DIVIDE . expression
    (1) expression -> . END
    (2) expression -> . ERR
    (3) expression -> . expression END
    (4) expression -> . expression ADD expression
    (5) expression -> . expression SUB expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULO expression
    (9) expression -> . expression POWER exponent
    (16) expression -> . SUB NUMBER
    (17) expression -> . SUB expression
    (18) expression -> . LBRACKET expression RBRACKET
    (19) expression -> . NUMBER

    END             shift and go to state 2
    ERR             shift and go to state 3
    SUB             shift and go to state 4
    LBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5

    expression                     shift and go to state 20

state 12

    (8) expression -> expression MODULO . expression
    (1) expression -> . END
    (2) expression -> . ERR
    (3) expression -> . expression END
    (4) expression -> . expression ADD expression
    (5) expression -> . expression SUB expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression MODULO expression
    (9) expression -> . expression POWER exponent
    (16) expression -> . SUB NUMBER
    (17) expression -> . SUB expression
    (18) expression -> . LBRACKET expression RBRACKET
    (19) expression -> . NUMBER

    END             shift and go to state 2
    ERR             shift and go to state 3
    SUB             shift and go to state 4
    LBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5

    expression                     shift and go to state 21

state 13

    (9) expression -> expression POWER . exponent
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25
    NUMBER          shift and go to state 24

    exponent                       shift and go to state 22

state 14

    (16) expression -> SUB NUMBER .
    (19) expression -> NUMBER .

  ! reduce/reduce conflict for END resolved using rule 16 (expression -> SUB NUMBER .)
  ! reduce/reduce conflict for ADD resolved using rule 16 (expression -> SUB NUMBER .)
  ! reduce/reduce conflict for SUB resolved using rule 16 (expression -> SUB NUMBER .)
  ! reduce/reduce conflict for MULT resolved using rule 16 (expression -> SUB NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 16 (expression -> SUB NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 16 (expression -> SUB NUMBER .)
  ! reduce/reduce conflict for POWER resolved using rule 16 (expression -> SUB NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 16 (expression -> SUB NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 16 (expression -> SUB NUMBER .)
    END             reduce using rule 16 (expression -> SUB NUMBER .)
    ADD             reduce using rule 16 (expression -> SUB NUMBER .)
    SUB             reduce using rule 16 (expression -> SUB NUMBER .)
    MULT            reduce using rule 16 (expression -> SUB NUMBER .)
    DIVIDE          reduce using rule 16 (expression -> SUB NUMBER .)
    MODULO          reduce using rule 16 (expression -> SUB NUMBER .)
    POWER           reduce using rule 16 (expression -> SUB NUMBER .)
    $end            reduce using rule 16 (expression -> SUB NUMBER .)
    RBRACKET        reduce using rule 16 (expression -> SUB NUMBER .)

  ! END             [ reduce using rule 19 (expression -> NUMBER .) ]
  ! ADD             [ reduce using rule 19 (expression -> NUMBER .) ]
  ! SUB             [ reduce using rule 19 (expression -> NUMBER .) ]
  ! MULT            [ reduce using rule 19 (expression -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> NUMBER .) ]
  ! MODULO          [ reduce using rule 19 (expression -> NUMBER .) ]
  ! POWER           [ reduce using rule 19 (expression -> NUMBER .) ]
  ! $end            [ reduce using rule 19 (expression -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 19 (expression -> NUMBER .) ]


state 15

    (17) expression -> SUB expression .
    (3) expression -> expression . END
    (4) expression -> expression . ADD expression
    (5) expression -> expression . SUB expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULO expression
    (9) expression -> expression . POWER exponent

    END             reduce using rule 17 (expression -> SUB expression .)
    ADD             reduce using rule 17 (expression -> SUB expression .)
    SUB             reduce using rule 17 (expression -> SUB expression .)
    MULT            reduce using rule 17 (expression -> SUB expression .)
    DIVIDE          reduce using rule 17 (expression -> SUB expression .)
    MODULO          reduce using rule 17 (expression -> SUB expression .)
    $end            reduce using rule 17 (expression -> SUB expression .)
    RBRACKET        reduce using rule 17 (expression -> SUB expression .)
    POWER           shift and go to state 13

  ! POWER           [ reduce using rule 17 (expression -> SUB expression .) ]
  ! END             [ shift and go to state 7 ]
  ! ADD             [ shift and go to state 8 ]
  ! SUB             [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULO          [ shift and go to state 12 ]


state 16

    (18) expression -> LBRACKET expression . RBRACKET
    (3) expression -> expression . END
    (4) expression -> expression . ADD expression
    (5) expression -> expression . SUB expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULO expression
    (9) expression -> expression . POWER exponent

    RBRACKET        shift and go to state 26
    END             shift and go to state 7
    ADD             shift and go to state 8
    SUB             shift and go to state 9
    MULT            shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULO          shift and go to state 12
    POWER           shift and go to state 13


state 17

    (4) expression -> expression ADD expression .
    (3) expression -> expression . END
    (4) expression -> expression . ADD expression
    (5) expression -> expression . SUB expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULO expression
    (9) expression -> expression . POWER exponent

    END             reduce using rule 4 (expression -> expression ADD expression .)
    ADD             reduce using rule 4 (expression -> expression ADD expression .)
    SUB             reduce using rule 4 (expression -> expression ADD expression .)
    $end            reduce using rule 4 (expression -> expression ADD expression .)
    RBRACKET        reduce using rule 4 (expression -> expression ADD expression .)
    MULT            shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULO          shift and go to state 12
    POWER           shift and go to state 13

  ! MULT            [ reduce using rule 4 (expression -> expression ADD expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression ADD expression .) ]
  ! MODULO          [ reduce using rule 4 (expression -> expression ADD expression .) ]
  ! POWER           [ reduce using rule 4 (expression -> expression ADD expression .) ]
  ! END             [ shift and go to state 7 ]
  ! ADD             [ shift and go to state 8 ]
  ! SUB             [ shift and go to state 9 ]


state 18

    (5) expression -> expression SUB expression .
    (3) expression -> expression . END
    (4) expression -> expression . ADD expression
    (5) expression -> expression . SUB expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULO expression
    (9) expression -> expression . POWER exponent

    END             reduce using rule 5 (expression -> expression SUB expression .)
    ADD             reduce using rule 5 (expression -> expression SUB expression .)
    SUB             reduce using rule 5 (expression -> expression SUB expression .)
    $end            reduce using rule 5 (expression -> expression SUB expression .)
    RBRACKET        reduce using rule 5 (expression -> expression SUB expression .)
    MULT            shift and go to state 10
    DIVIDE          shift and go to state 11
    MODULO          shift and go to state 12
    POWER           shift and go to state 13

  ! MULT            [ reduce using rule 5 (expression -> expression SUB expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression SUB expression .) ]
  ! MODULO          [ reduce using rule 5 (expression -> expression SUB expression .) ]
  ! POWER           [ reduce using rule 5 (expression -> expression SUB expression .) ]
  ! END             [ shift and go to state 7 ]
  ! ADD             [ shift and go to state 8 ]
  ! SUB             [ shift and go to state 9 ]


state 19

    (6) expression -> expression MULT expression .
    (3) expression -> expression . END
    (4) expression -> expression . ADD expression
    (5) expression -> expression . SUB expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULO expression
    (9) expression -> expression . POWER exponent

    END             reduce using rule 6 (expression -> expression MULT expression .)
    ADD             reduce using rule 6 (expression -> expression MULT expression .)
    SUB             reduce using rule 6 (expression -> expression MULT expression .)
    MULT            reduce using rule 6 (expression -> expression MULT expression .)
    DIVIDE          reduce using rule 6 (expression -> expression MULT expression .)
    MODULO          reduce using rule 6 (expression -> expression MULT expression .)
    $end            reduce using rule 6 (expression -> expression MULT expression .)
    RBRACKET        reduce using rule 6 (expression -> expression MULT expression .)
    POWER           shift and go to state 13

  ! POWER           [ reduce using rule 6 (expression -> expression MULT expression .) ]
  ! END             [ shift and go to state 7 ]
  ! ADD             [ shift and go to state 8 ]
  ! SUB             [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULO          [ shift and go to state 12 ]


state 20

    (7) expression -> expression DIVIDE expression .
    (3) expression -> expression . END
    (4) expression -> expression . ADD expression
    (5) expression -> expression . SUB expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULO expression
    (9) expression -> expression . POWER exponent

    END             reduce using rule 7 (expression -> expression DIVIDE expression .)
    ADD             reduce using rule 7 (expression -> expression DIVIDE expression .)
    SUB             reduce using rule 7 (expression -> expression DIVIDE expression .)
    MULT            reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 7 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 13

  ! POWER           [ reduce using rule 7 (expression -> expression DIVIDE expression .) ]
  ! END             [ shift and go to state 7 ]
  ! ADD             [ shift and go to state 8 ]
  ! SUB             [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULO          [ shift and go to state 12 ]


state 21

    (8) expression -> expression MODULO expression .
    (3) expression -> expression . END
    (4) expression -> expression . ADD expression
    (5) expression -> expression . SUB expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . MODULO expression
    (9) expression -> expression . POWER exponent

    END             reduce using rule 8 (expression -> expression MODULO expression .)
    ADD             reduce using rule 8 (expression -> expression MODULO expression .)
    SUB             reduce using rule 8 (expression -> expression MODULO expression .)
    MULT            reduce using rule 8 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 8 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 8 (expression -> expression MODULO expression .)
    $end            reduce using rule 8 (expression -> expression MODULO expression .)
    RBRACKET        reduce using rule 8 (expression -> expression MODULO expression .)
    POWER           shift and go to state 13

  ! POWER           [ reduce using rule 8 (expression -> expression MODULO expression .) ]
  ! END             [ shift and go to state 7 ]
  ! ADD             [ shift and go to state 8 ]
  ! SUB             [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! MODULO          [ shift and go to state 12 ]


state 22

    (9) expression -> expression POWER exponent .
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    END             reduce using rule 9 (expression -> expression POWER exponent .)
    ADD             reduce using rule 9 (expression -> expression POWER exponent .)
    SUB             reduce using rule 9 (expression -> expression POWER exponent .)
    MULT            reduce using rule 9 (expression -> expression POWER exponent .)
    DIVIDE          reduce using rule 9 (expression -> expression POWER exponent .)
    MODULO          reduce using rule 9 (expression -> expression POWER exponent .)
    $end            reduce using rule 9 (expression -> expression POWER exponent .)
    RBRACKET        reduce using rule 9 (expression -> expression POWER exponent .)
    POWER           shift and go to state 27

  ! POWER           [ reduce using rule 9 (expression -> expression POWER exponent .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUB             [ shift and go to state 29 ]
  ! MULT            [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]


state 23

    (20) exponent -> SUB . NUMBER
    (21) exponent -> SUB . exponent
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    NUMBER          shift and go to state 33
    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25

    exponent                       shift and go to state 34

state 24

    (23) exponent -> NUMBER .

    ADD             reduce using rule 23 (exponent -> NUMBER .)
    SUB             reduce using rule 23 (exponent -> NUMBER .)
    MULT            reduce using rule 23 (exponent -> NUMBER .)
    DIVIDE          reduce using rule 23 (exponent -> NUMBER .)
    MODULO          reduce using rule 23 (exponent -> NUMBER .)
    POWER           reduce using rule 23 (exponent -> NUMBER .)
    END             reduce using rule 23 (exponent -> NUMBER .)
    $end            reduce using rule 23 (exponent -> NUMBER .)
    RBRACKET        reduce using rule 23 (exponent -> NUMBER .)


state 25

    (22) exponent -> LBRACKET . exponent RBRACKET
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25
    NUMBER          shift and go to state 24

    exponent                       shift and go to state 35

state 26

    (18) expression -> LBRACKET expression RBRACKET .

    END             reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)
    ADD             reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)
    SUB             reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)
    MULT            reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)
    POWER           reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)
    $end            reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 18 (expression -> LBRACKET expression RBRACKET .)


state 27

    (15) exponent -> exponent POWER . exponent
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25
    NUMBER          shift and go to state 24

    exponent                       shift and go to state 36

state 28

    (10) exponent -> exponent ADD . exponent
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25
    NUMBER          shift and go to state 24

    exponent                       shift and go to state 37

state 29

    (11) exponent -> exponent SUB . exponent
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25
    NUMBER          shift and go to state 24

    exponent                       shift and go to state 38

state 30

    (12) exponent -> exponent MULT . exponent
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25
    NUMBER          shift and go to state 24

    exponent                       shift and go to state 39

state 31

    (13) exponent -> exponent DIVIDE . exponent
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25
    NUMBER          shift and go to state 24

    exponent                       shift and go to state 40

state 32

    (14) exponent -> exponent MODULO . exponent
    (10) exponent -> . exponent ADD exponent
    (11) exponent -> . exponent SUB exponent
    (12) exponent -> . exponent MULT exponent
    (13) exponent -> . exponent DIVIDE exponent
    (14) exponent -> . exponent MODULO exponent
    (15) exponent -> . exponent POWER exponent
    (20) exponent -> . SUB NUMBER
    (21) exponent -> . SUB exponent
    (22) exponent -> . LBRACKET exponent RBRACKET
    (23) exponent -> . NUMBER

    SUB             shift and go to state 23
    LBRACKET        shift and go to state 25
    NUMBER          shift and go to state 24

    exponent                       shift and go to state 41

state 33

    (20) exponent -> SUB NUMBER .
    (23) exponent -> NUMBER .

  ! reduce/reduce conflict for ADD resolved using rule 20 (exponent -> SUB NUMBER .)
  ! reduce/reduce conflict for SUB resolved using rule 20 (exponent -> SUB NUMBER .)
  ! reduce/reduce conflict for MULT resolved using rule 20 (exponent -> SUB NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 20 (exponent -> SUB NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 20 (exponent -> SUB NUMBER .)
  ! reduce/reduce conflict for POWER resolved using rule 20 (exponent -> SUB NUMBER .)
  ! reduce/reduce conflict for END resolved using rule 20 (exponent -> SUB NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 20 (exponent -> SUB NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 20 (exponent -> SUB NUMBER .)
    ADD             reduce using rule 20 (exponent -> SUB NUMBER .)
    SUB             reduce using rule 20 (exponent -> SUB NUMBER .)
    MULT            reduce using rule 20 (exponent -> SUB NUMBER .)
    DIVIDE          reduce using rule 20 (exponent -> SUB NUMBER .)
    MODULO          reduce using rule 20 (exponent -> SUB NUMBER .)
    POWER           reduce using rule 20 (exponent -> SUB NUMBER .)
    END             reduce using rule 20 (exponent -> SUB NUMBER .)
    $end            reduce using rule 20 (exponent -> SUB NUMBER .)
    RBRACKET        reduce using rule 20 (exponent -> SUB NUMBER .)

  ! ADD             [ reduce using rule 23 (exponent -> NUMBER .) ]
  ! SUB             [ reduce using rule 23 (exponent -> NUMBER .) ]
  ! MULT            [ reduce using rule 23 (exponent -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 23 (exponent -> NUMBER .) ]
  ! MODULO          [ reduce using rule 23 (exponent -> NUMBER .) ]
  ! POWER           [ reduce using rule 23 (exponent -> NUMBER .) ]
  ! END             [ reduce using rule 23 (exponent -> NUMBER .) ]
  ! $end            [ reduce using rule 23 (exponent -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 23 (exponent -> NUMBER .) ]


state 34

    (21) exponent -> SUB exponent .
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    ADD             reduce using rule 21 (exponent -> SUB exponent .)
    SUB             reduce using rule 21 (exponent -> SUB exponent .)
    MULT            reduce using rule 21 (exponent -> SUB exponent .)
    DIVIDE          reduce using rule 21 (exponent -> SUB exponent .)
    MODULO          reduce using rule 21 (exponent -> SUB exponent .)
    END             reduce using rule 21 (exponent -> SUB exponent .)
    $end            reduce using rule 21 (exponent -> SUB exponent .)
    RBRACKET        reduce using rule 21 (exponent -> SUB exponent .)
    POWER           shift and go to state 27

  ! POWER           [ reduce using rule 21 (exponent -> SUB exponent .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUB             [ shift and go to state 29 ]
  ! MULT            [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]


state 35

    (22) exponent -> LBRACKET exponent . RBRACKET
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    RBRACKET        shift and go to state 42
    ADD             shift and go to state 28
    SUB             shift and go to state 29
    MULT            shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    POWER           shift and go to state 27


state 36

    (15) exponent -> exponent POWER exponent .
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    ADD             reduce using rule 15 (exponent -> exponent POWER exponent .)
    SUB             reduce using rule 15 (exponent -> exponent POWER exponent .)
    MULT            reduce using rule 15 (exponent -> exponent POWER exponent .)
    DIVIDE          reduce using rule 15 (exponent -> exponent POWER exponent .)
    MODULO          reduce using rule 15 (exponent -> exponent POWER exponent .)
    END             reduce using rule 15 (exponent -> exponent POWER exponent .)
    $end            reduce using rule 15 (exponent -> exponent POWER exponent .)
    RBRACKET        reduce using rule 15 (exponent -> exponent POWER exponent .)
    POWER           shift and go to state 27

  ! POWER           [ reduce using rule 15 (exponent -> exponent POWER exponent .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUB             [ shift and go to state 29 ]
  ! MULT            [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]


state 37

    (10) exponent -> exponent ADD exponent .
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    ADD             reduce using rule 10 (exponent -> exponent ADD exponent .)
    SUB             reduce using rule 10 (exponent -> exponent ADD exponent .)
    END             reduce using rule 10 (exponent -> exponent ADD exponent .)
    $end            reduce using rule 10 (exponent -> exponent ADD exponent .)
    RBRACKET        reduce using rule 10 (exponent -> exponent ADD exponent .)
    MULT            shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    POWER           shift and go to state 27

  ! MULT            [ reduce using rule 10 (exponent -> exponent ADD exponent .) ]
  ! DIVIDE          [ reduce using rule 10 (exponent -> exponent ADD exponent .) ]
  ! MODULO          [ reduce using rule 10 (exponent -> exponent ADD exponent .) ]
  ! POWER           [ reduce using rule 10 (exponent -> exponent ADD exponent .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUB             [ shift and go to state 29 ]


state 38

    (11) exponent -> exponent SUB exponent .
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    ADD             reduce using rule 11 (exponent -> exponent SUB exponent .)
    SUB             reduce using rule 11 (exponent -> exponent SUB exponent .)
    END             reduce using rule 11 (exponent -> exponent SUB exponent .)
    $end            reduce using rule 11 (exponent -> exponent SUB exponent .)
    RBRACKET        reduce using rule 11 (exponent -> exponent SUB exponent .)
    MULT            shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    POWER           shift and go to state 27

  ! MULT            [ reduce using rule 11 (exponent -> exponent SUB exponent .) ]
  ! DIVIDE          [ reduce using rule 11 (exponent -> exponent SUB exponent .) ]
  ! MODULO          [ reduce using rule 11 (exponent -> exponent SUB exponent .) ]
  ! POWER           [ reduce using rule 11 (exponent -> exponent SUB exponent .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUB             [ shift and go to state 29 ]


state 39

    (12) exponent -> exponent MULT exponent .
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    ADD             reduce using rule 12 (exponent -> exponent MULT exponent .)
    SUB             reduce using rule 12 (exponent -> exponent MULT exponent .)
    MULT            reduce using rule 12 (exponent -> exponent MULT exponent .)
    DIVIDE          reduce using rule 12 (exponent -> exponent MULT exponent .)
    MODULO          reduce using rule 12 (exponent -> exponent MULT exponent .)
    END             reduce using rule 12 (exponent -> exponent MULT exponent .)
    $end            reduce using rule 12 (exponent -> exponent MULT exponent .)
    RBRACKET        reduce using rule 12 (exponent -> exponent MULT exponent .)
    POWER           shift and go to state 27

  ! POWER           [ reduce using rule 12 (exponent -> exponent MULT exponent .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUB             [ shift and go to state 29 ]
  ! MULT            [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]


state 40

    (13) exponent -> exponent DIVIDE exponent .
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    ADD             reduce using rule 13 (exponent -> exponent DIVIDE exponent .)
    SUB             reduce using rule 13 (exponent -> exponent DIVIDE exponent .)
    MULT            reduce using rule 13 (exponent -> exponent DIVIDE exponent .)
    DIVIDE          reduce using rule 13 (exponent -> exponent DIVIDE exponent .)
    MODULO          reduce using rule 13 (exponent -> exponent DIVIDE exponent .)
    END             reduce using rule 13 (exponent -> exponent DIVIDE exponent .)
    $end            reduce using rule 13 (exponent -> exponent DIVIDE exponent .)
    RBRACKET        reduce using rule 13 (exponent -> exponent DIVIDE exponent .)
    POWER           shift and go to state 27

  ! POWER           [ reduce using rule 13 (exponent -> exponent DIVIDE exponent .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUB             [ shift and go to state 29 ]
  ! MULT            [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]


state 41

    (14) exponent -> exponent MODULO exponent .
    (10) exponent -> exponent . ADD exponent
    (11) exponent -> exponent . SUB exponent
    (12) exponent -> exponent . MULT exponent
    (13) exponent -> exponent . DIVIDE exponent
    (14) exponent -> exponent . MODULO exponent
    (15) exponent -> exponent . POWER exponent

    ADD             reduce using rule 14 (exponent -> exponent MODULO exponent .)
    SUB             reduce using rule 14 (exponent -> exponent MODULO exponent .)
    MULT            reduce using rule 14 (exponent -> exponent MODULO exponent .)
    DIVIDE          reduce using rule 14 (exponent -> exponent MODULO exponent .)
    MODULO          reduce using rule 14 (exponent -> exponent MODULO exponent .)
    END             reduce using rule 14 (exponent -> exponent MODULO exponent .)
    $end            reduce using rule 14 (exponent -> exponent MODULO exponent .)
    RBRACKET        reduce using rule 14 (exponent -> exponent MODULO exponent .)
    POWER           shift and go to state 27

  ! POWER           [ reduce using rule 14 (exponent -> exponent MODULO exponent .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUB             [ shift and go to state 29 ]
  ! MULT            [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]


state 42

    (22) exponent -> LBRACKET exponent RBRACKET .

    ADD             reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)
    SUB             reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)
    MULT            reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)
    DIVIDE          reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)
    MODULO          reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)
    POWER           reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)
    END             reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)
    $end            reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)
    RBRACKET        reduce using rule 22 (exponent -> LBRACKET exponent RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 14 resolved using rule (expression -> SUB NUMBER)
WARNING: rejected rule (expression -> NUMBER) in state 14
WARNING: reduce/reduce conflict in state 33 resolved using rule (exponent -> SUB NUMBER)
WARNING: rejected rule (exponent -> NUMBER) in state 33
