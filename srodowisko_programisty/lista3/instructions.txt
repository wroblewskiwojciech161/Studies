
===================================================================================================
zad2
===================================================================================================
#funkcja cat otworzy wszystkie pliki regularne , następnie :
# xargs wylistuje ich zawartość  czyli słowa w jednej lini
# dodając flagę -n1 wylistuje je linia po lini
# w rozwiązaniu traktuję że słowo pisane  z dużych czy małych liter to to samo słowo
# aby zachować case sensitivity należy usunąć  komendę  tr która zamienia
# wielkie litery na małe 
# pod koniec wystarczy posortować aby ustawić słowa takie same  koło siebie 
# i zastosować komendę uniq -c do policzenia

#!/bin/bash


file_path=$(echo $2 | cut -d@ -f2 | cut -d/ -f2- | cut -d? -f1 | sed 's/.$//')
rm -r  ${file_path##/*/}
svn export -r $1 $2
echo "===================="
echo "STATYSTYKI"
echo "===================="
cat $(find ${file_path##/*/}/ -type f)  | xargs -n2  | tr '[A-Z] ' '[a-z]\n' | sort | uniq -c





##!/bin/bash
#svn export -r $1 $2
#file_path=$(echo $2 | cut -d@ -f2 | cut -d/ -f2- | cut -d? -f1 | sed 's/.$//')
#for value in  $(find ${file_path##/*/}/ -type f)
#do
#    cat $value
#done  | xargs -n2  | tr '[A-Z] ' '[a-z]\n' | sort | uniq -c


=====================================================================================================
zad3
=====================================================================================================
#przechodzę w pętli po wszystkich plikach regularnych
# na początku usuwam punktatory (opcjonalnie na wszelki wypadek jakby były)
# znowu traktuję że słowo z dużych i małych liter to to samo 
# żeby zachować case  sensitivity należy usunąć komendę tr
# funkcja sed usuwa białe znaki , w przeciwnym wypadku ich liczba pojawiłaby się 
# w statystykach (wykonanych przez ten skrypt)
# usuwamy duplikaty w pliku funkcją sort -u
#
# na samym końcu jak mamy wylistowane słowa z wszystkich plików
#(wiedząć żę w plikach nie  było duplikatów) zliczam je najpierw
# sortując aby były koło siebie
# i dodając uniq - c 


#! /bin/bash

#Wojciech Wróblewski zad3/lista1

file_path=$(echo $2 | cut -d@ -f2 | cut -d/ -f2- | cut -d? -f1 | sed 's/.$//')
rm -r  ${file_path##/*/}
svn export -r $1 $2

echo "===================="
echo "STATYSTYKI"
echo "===================="

for file in $(find ${file_path##/*/}/ -type f)
do
    tr -d '[:punct:]' < "$file" | tr '[A-Z] ' '[a-z]\n'  |  sed '/^$/d;s/[[:blank:]]//g'| sort -u 

done | sort | uniq -c 

====================================================================================================
zad1
====================================================================================================

#tworzenie kopii roboczej .

> svn checkout https://repo.cs.pwr.edu.pl/p_25/
---------------------------------
#tworzenie brancha 

>svn copy  https://repo.cs.pwr.edu.pl/p_25/app_1/trunk  https://repo.cs.pwr.edu.pl/p_25/app_1/branches/250349b
 ----------------------------
#dodanie swojego progsa

ok MAIN/MAKEFILE/PROGRAM.H

--------------------------------
#sprawdzenie czy dziala

#make
./program 250349

--------------------------------

#commit

>svn commit 250349b -m " dodany podprogram - student 250349 "
--------------------------------
#update

>svn update
-------------------------------------
#merge with trunk

>svn merge  https://repo.cs.pwr.edu.pl/p_25/app_1/trunk
--------------------------------------
# sprawdz czy sa jakies konflikty i czy działa

--------------------------------
# commit
> svn commit 250349b -m "student 250349 program merged with trunk"



=====================part2


# ready to reintegrate -> go to trunk
# svn update

> svn merge --reintegrate https://repo.cs.pwr.edu.pl/p_25/app_1/branches/250349b

# test if working

#go to branches and remove branch 250349b

> svn delete 250349b
>svn commit -m "deleting student(250349) branch"

#make tag/ go to tags

>svn copy https://repo.cs.pwr.edu.pl/p_25/app_1/trunk
      https://repo.cs.pwr.edu.pl/p_25/app_1/tags/v_250349 -m "version 250349"

#test czy działa 
# make
./program 250349





!!!!!!!!!!!!!!!
svn log -v







=================program

#include "program.h"

void  s250349_podprogram() {
    int n, i;

    unsigned long long fact = 1;
    printf(" \n");
    printf(" \n");
    printf("Podaj liczbę naturalną: \n");
    scanf("%d", &n);

    if (n < 0)
        printf("error, podaj liczbę naturalną");
    else {
        for (i = 1; i <= n; ++i) {
            fact *= i;
        }
        printf("Silnia z %d to  %llu \n", n, fact);
    }

}








SKRYPT2
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////




#!/bin/bash

#Wojciech Wróblewski zad2/lista3

# pobieram file path bez ostatniego slasha (funkcja sed) 
file_path=$(echo $2 | cut -d@ -f2 | cut -d/ -f2- | cut -d? -f1 | sed 's/.$//')

# jezeli folder root o danej nazwie istniał w katalogu to go usuwam
# wyrażenie ${file_path##/*/} zwraca nam nazwę folderu root z linku w przypadkach na liście było "a"
rm -r  ${file_path##/*/}
svn export -r $1 $2

# wyswietlam statystyki
echo "===================="
echo "STATYSTYKI"
echo "===================="



#funkcja cat otworzy wszystkie pliki regularnew zadanym polderze lub jego podfolderach następnie :
# xargs wylistuje ich zawartość  czyli słowa w jednej lini
# dodając flagę -n1 wylistuje je linia po lini
# w rozwiązaniu traktuję że słowo pisane  z dużych czy małych liter to to samo słowo
# aby zachować case sensitivity należy usunąć  komendę  tr która zamienia
# wielkie litery na małe 
# pod koniec wystarczy posortować aby ustawić słowa takie same  koło siebie 
# i zastosować komendę uniq -c do policzenia


cat $(find ${file_path##/*/}/ -type f)  | xargs -n1  | tr '[A-Z] ' '[a-z]\n' | sort | uniq -c


#po uzyskaniu statystyk usuwam folder root
rm -r  ${file_path##/*/}






#====================
#STATYSTYKI 15
#====================
#    10 a
#      3 aa
#     1 aaa
#     1 aaaab
#      1 aaabb
#      2 aab
#      1 aabab
#     1 aabbb
#      6 ab
#      1 aba
#      1 abaab
#      1 ababb
#      2 abb
#      1 abbab
#      1 abbbb
#     10 b
#      1 bab
#      3 bb
#      1 bbb




#====================
#STATYSTYKI 18
#====================
#     11 a
#      3 aa
#      1 aaa
#      1 aaaab
#      1 aaabb
#      2 aab
#      1 aabab
#      1 aabbb
#      6 ab
#      1 aba
#      1 abaab
#     1 ababb
#      2 abb
#      1 abbab
#      1 abbbb
#     10 b
#      1 bab
#      3 bb
#      1 bbb
#      4 c
#      2 d



SKRYPT 3
/////////////////////////////////////////////////
/////////////////////////////////////////////////


#! /bin/bash

#Wojciech Wróblewski zad3/lista3

# pobieram file path bez ostatniego slasha (funkcja sed) 

file_path=$(echo $2 | cut -d@ -f2 | cut -d/ -f2- | cut -d? -f1 | sed 's/.$//')

# jezeli folder root o danej nazwie istniał w katalogu to go usuwam
# wyrażenie ${file_path##/*/} zwraca nam nazwę folderu root z linku w przypadkach na liście było "a"

rm -r  ${file_path##/*/}
svn export -r $1 $2


#wyświetlmy statystyki
echo "===================="
echo "STATYSTYKI"
echo "===================="


#przechodzę w pętli po wszystkich plikach regularnych
# na początku usuwam punktatory (opcjonalnie na wszelki wypadek jakby były)
# znowu traktuję że słowo z dużych i małych liter to to samo 
# żeby zachować case  sensitivity należy usunąć komendę tr
# funkcja sed usuwa białe znaki , w przeciwnym wypadku ich liczba pojawiłaby się 
# w statystykach (wykonanych przez ten skrypt)
# usuwamy duplikaty w pliku funkcją sort -u
#
# na samym końcu jak mamy wylistowane słowa z wszystkich plików
#(wiedząć żę w plikach nie  było duplikatów) zliczam je najpierw
# sortując aby były koło siebie
# i dodając uniq - c 


for file in $(find ${file_path##/*/}/ -type f)
do
    tr -d '[:punct:]' < "$file" | tr '[A-Z] ' '[a-z]\n'  |  sed '/^$/d;s/[[:blank:]]//g'| sort -u 

done | sort | uniq -c 


#po uzyskaniu statystyk usuwam folder root
rm -r  ${file_path##/*/}




#====================
#STATYSTYKI
#====================
#      7 a
#      3 aa
#      1 aaa
#      1 aaaab
#      1 aaabb
#      2 aab
#      1 aabab
#      1 aabbb
#      5 ab
#      1 aba
#      1 abaab
#      1 ababb
#      2 abb
#      1 abbab
#      1 abbbb
#      7 b
#      1 bab
#      3 bb
#      1 bbb



#====================
#STATYSTYKI
#====================
#      7 a
#      3 aa
#      1 aaa
#      1 aaaab
#      1 aaabb
#      2 aab
#      1 aabab
#      1 aabbb
#      5 ab
#      1 aba
#      1 abaab
#      1 ababb
#      2 abb
#      1 abbab
#      1 abbbb
#      7 b
#      1 bab
#      3 bb
#      1 bbb
#      3 c
#      2 d
#      1 dd






























